//
// Generated file, do not edit! Created by opp_msgc 4.1 from transport/tcp/queues/MsgByteBuffer.msg.
//

#ifndef _MSGBYTEBUFFER_M_H_
#define _MSGBYTEBUFFER_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <iostream>
#include "INETDefs.h"
#include "TCPSegment.h"
// }}



/**
 * Class generated from <tt>transport/tcp/queues/MsgByteBuffer.msg</tt> by opp_msgc.
 * <pre>
 * packet MsgByteBuffer
 * {
 *     @customize(true);
 *     
 *     
 *     
 *     abstract cPacketPtr payload[];
 * }
 * </pre>
 *
 * MsgByteBuffer_Base is only useful if it gets subclassed, and MsgByteBuffer is derived from it.
 * The minimum code to be written for MsgByteBuffer is the following:
 *
 * <pre>
 * class MsgByteBuffer : public MsgByteBuffer_Base
 * {
 *   public:
 *     MsgByteBuffer(const char *name=NULL, int kind=0) : MsgByteBuffer_Base(name,kind) {}
 *     MsgByteBuffer(const MsgByteBuffer& other) : MsgByteBuffer_Base(other.getName()) {operator=(other);}
 *     MsgByteBuffer& operator=(const MsgByteBuffer& other) {MsgByteBuffer_Base::operator=(other); return *this;}
 *     virtual MsgByteBuffer *dup() const {return new MsgByteBuffer(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from MsgByteBuffer_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(MsgByteBuffer);
 * </pre>
 */
class MsgByteBuffer_Base : public ::cPacket
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MsgByteBuffer_Base&);
    // make constructors protected to avoid instantiation
    MsgByteBuffer_Base(const char *name=NULL, int kind=0);
    MsgByteBuffer_Base(const MsgByteBuffer_Base& other);
    // make assignment operator protected to force the user override it
    MsgByteBuffer_Base& operator=(const MsgByteBuffer_Base& other);

  public:
    virtual ~MsgByteBuffer_Base();
    virtual MsgByteBuffer_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class MsgByteBuffer");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setPayloadArraySize(unsigned int size) = 0;
    virtual unsigned int getPayloadArraySize() const = 0;
    virtual cPacketPtr& getPayload(unsigned int k) = 0;
    virtual const cPacketPtr& getPayload(unsigned int k) const {return const_cast<MsgByteBuffer_Base*>(this)->getPayload(k);}
    virtual void setPayload(unsigned int k, const cPacketPtr& payload_var) = 0;
};


#endif // _MSGBYTEBUFFER_M_H_
